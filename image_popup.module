<?php

/**
 * @file
 * A light-weight, customizable image popup plugin for jQuery 1.3
 */

 /**
 * Implements hook_theme().
 */
function image_popup_theme() {
  return array(
    'image_popup_imagefield' => array(
      'variables' => array(
        'image' => array(),
        'path' => NULL,
        'title' => NULL,
        'gid' => NULL,
       'display_style' => NULL,
      ),
      'file' => 'image_popup.theme.inc',
    ),



    'image_popup_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'entity_type' => NULL,
        'entity' => NULL,
        'node' => NULL,  // Left for legacy support.
        'field' => array(),
         'display_style' => NULL, 
        'display_settings' => array(),
        'delta' => null,
      ),
      'file' => 'image_popup.theme.inc',
    ),
  );
}

/**
 * Implements hook_init().
 */
function image_popup_init() {
  if (!drupal_installation_attempted()) {
      
 drupal_add_css(drupal_get_path('module',  'image_popup').'/css/smoothzoom.css', array('scope' => 'header'));
 drupal_add_js(drupal_get_path('module',  'image_popup').'/js/easing.js', array('scope' => 'footer','weight' => 1));
   drupal_add_js(drupal_get_path('module', 'image_popup').'/js/smoothzoom.min.js', array('scope' => 'footer','weight' => 2));
    drupal_add_js(drupal_get_path('module','image_popup').'/js/img_popup.js', array('scope' => 'footer','weight' => 3));

 }
}


/**
 * Implements hook_field_formatter_info().
 *
 * @see field_example_field_formatter_view()
 */
function image_popup_field_formatter_info() {
  return array(
    'image_popup' => array(
      'label' => t('image popup'),
      'field types' => array('image'),
       'settings' => array('image_popup_display_style' => '',)
    ),
  );
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function image_popup_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  
  $image_styles = image_style_options(FALSE);
  $element['image_popup_display_style'] = array(
    '#type' => 'select',
    '#title' => t('Display image style'),
    '#options' => $image_styles,
    '#empty_option' => t('None (original image)'),
    '#default_value' => $settings['image_popup_display_style'],
  );
  return $element ;
}



/**
 * Implements hook_field_formatter_settings_summary().
 */
function image_popup_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();

$image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that define
  // their styles in code.
  $summary[] = t('Display image style: @style', array(
    '@style' => isset($image_styles[$settings['image_popup_display_style']]) ?
    $image_styles[$settings['image_popup_display_style']] : 'original',
  ));

   return implode('<br />', $summary);
  
}

/**
 * Implements hook_field_formatter_view().
 */
function image_popup_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $display_style = $display['settings']['image_popup_display_style'];
    
    $context = array(
    'field' => $field,
    'instance' => $instance,
  );
  drupal_alter('image_popup_settings', $settings, $context);
    
  $element = array();


  foreach ($items as $delta => $item) {

      $element[$delta] = array(
        '#theme' => 'image_popup_image_formatter',
        '#item' => $item,
        '#entity_type' => $entity_type,
        '#entity' => $entity,
        '#node' => $entity, // Left for legacy support.
        '#field' => $field,
        '#display_style' => $display_style,
        '#display_settings' => $display['settings'],
        '#delta' => $delta,
      );
   
  }

  return $element;
}

